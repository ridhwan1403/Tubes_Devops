name: CI/CD Pipeline

# Event trigger
on:
  push:
    branches:
      - dev  # Trigger saat push ke branch dev
  pull_request:
    branches:
      - dev  # Trigger saat ada pull request ke branch dev

jobs:
  build:
    # Build Stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Environment
        run: |
          echo "Setting up environment..."
          sudo apt update
          sudo apt install -y python3 python3-pip
          pip install -r requirements.txt

      - name: Verify Build
        run: echo "Build stage completed!"

  test:
    # Test Stage
    runs-on: ubuntu-latest
    needs: build  # Test dijalankan setelah Build selesai
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest tests/

  security_scan:
    # Security Scanning Stage
    runs-on: ubuntu-latest
    needs: test  # Security scan dijalankan setelah Test selesai
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Static Code Analysis
        run: |
          echo "Running static code analysis using Bandit..."
          pip install bandit
          bandit -r ./src

  dast_scan:
    # Dynamic Application Security Testing (DAST) Stage
    runs-on: ubuntu-latest
    needs: security_scan  # DAST dijalankan setelah Security Scan selesai
    steps:
      - name: Start OWASP ZAP Container
        uses: docker://owasp/zap2docker-stable
        with:
          args: zap-baseline.py -t http://localhost:8080

      - name: DAST Scan Report
        run: echo "DAST scan completed!"

  deploy:
    # Deployment Stage
    runs-on: ubuntu-latest
    needs: dast_scan  # Deployment dijalankan setelah DAST selesai
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy to Staging
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        run: |
          echo "Deploying to Staging Environment..."
          ssh -i ~/.ssh/id_rsa user@${{ env.STAGING_SERVER }} <<EOF
          cd /path/to/your/application
          git pull origin dev
          systemctl restart your_application.service
          EOF
